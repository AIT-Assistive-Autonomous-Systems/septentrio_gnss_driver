// *****************************************************************************
//
// Â© Copyright 2020, Septentrio NV/SA.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the copyright holder nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// *****************************************************************************

// *****************************************************************************
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// *****************************************************************************

#pragma once

// C++ includes
#include <algorithm>
#include <future>

// Boost includes
#include <boost/foreach.hpp>
// In C++, writing a loop that iterates over a sequence is tedious -->
// BOOST_FOREACH(char ch, "Hello World")
#include <boost/function.hpp>
// E.g. boost::function<int(const char*)> f = std::atoi;defines a pointer f that can
// point to functions that expect a parameter of type const char* and return a value
// of type int Generally, any place in which a function pointer would be used to
// defer a call or make a callback, Boost.Function can be used instead to allow the
// user greater flexibility in the implementation of the target.
#include <boost/thread.hpp>
// Boost's thread enables the use of multiple threads of execution with shared data
// in portable C++ code. It provides classes and functions for managing the threads
// themselves, along with others for synchronizing data between the threads or
// providing separate copies of data specific to individual threads.
#include <boost/thread/condition.hpp>
#include <boost/tokenizer.hpp>
// The tokenizer class provides a container view of a series of tokens contained in a
// sequence, e.g. if you are not interested in non-words...
#include <boost/algorithm/string/join.hpp>
// Join algorithm is a counterpart to split algorithms. It joins strings from a
// 'list' by adding user defined separator.
#include <boost/date_time/posix_time/posix_time.hpp>
// The class boost::posix_time::ptime that we will use defines a location-independent
// time. It uses the type boost::gregorian::date, yet also stores a time.
#include <boost/asio.hpp>
// Boost.Asio may be used to perform both synchronous and asynchronous operations on
// I/O objects such as sockets.
#include <boost/asio/serial_port.hpp>
#include <boost/bind.hpp>
#include <boost/format.hpp>
#include <boost/thread/mutex.hpp>

// ROSaic includes
#include <septentrio_gnss_driver/abstraction/typedefs.hpp>
#include <septentrio_gnss_driver/communication/telegram.hpp>
#include <septentrio_gnss_driver/parsers/message_parser.hpp>

/**
 * @file telegram_handler.hpp
 * @brief Handles messages when reading NMEA/SBF/response/error/connection descriptor
 * messages
 */

namespace io {
    class Semaphore
    {
    public:
        Semaphore() : block_(true) {}

        void notify()
        {
            std::unique_lock<std::mutex> lock(mtx_);
            block_ = false;
            cv_.notify_one();
        }

        void wait()
        {
            std::unique_lock<std::mutex> lock(mtx_);
            while (block_)
            {
                cv_.wait(lock);
            }
            block_ = true;
        }

    private:
        std::mutex mtx_;
        std::condition_variable cv_;
        bool block_;
    };

    /**
     * @class TelegramHandler
     * @brief Represents ensemble of (to be constructed) ROS messages, to be handled
     * at once by this class
     */
    class TelegramHandler
    {

    public:
        TelegramHandler(ROSaicNodeBase* node) : node_(node), messageParser_(node) {}

        /**
         * @brief Called every time a telegram is received
         */
        void handleTelegram(const std::shared_ptr<Telegram>& telegram);

        //! Returns the connection descriptor
        void resetWaitforMainCd()
        {
            cdCtr_ = 0;
            mainConnectionDescriptor_ = std::string();
        }

        //! Returns the connection descriptor
        std::string getMainCd()
        {
            cdSemaphore_.wait();
            return mainConnectionDescriptor_;
        }

        //! Waits for response
        void waitForResponse() { responseSemaphore_.wait(); }

    private:
        void handleSbf(const std::shared_ptr<Telegram>& telegram);
        void handleNmea(const std::shared_ptr<Telegram>& telegram);
        void handleResponse(const std::shared_ptr<Telegram>& telegram);
        void handleError(const std::shared_ptr<Telegram>& telegram);
        void handleCd(const std::shared_ptr<Telegram>& telegram);
        //! Pointer to Node
        ROSaicNodeBase* node_;

        //! MessageParser parser
        MessageParser messageParser_;

        uint8_t cdCtr_ = 0;
        Semaphore cdSemaphore_;
        Semaphore responseSemaphore_;
        std::string mainConnectionDescriptor_ = std::string();
    };

} // namespace io